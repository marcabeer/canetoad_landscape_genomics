library(LEA)
#provides read.matrix() function
library(tseries)
library(adegenet)
library(vcfR)
#provide plotting functions for PCA results
library(factoextra)
library(ggplot2)
library(ggnewscale)
library(cowplot)
##########
###
#load data
###
#load metadata
md <- read.table("metadata_individuals", sep="\t", header=TRUE)
##############################
#Load cane toad metadata
##############################
md <- read.table("metadata_individuals", sep="\t", header=TRUE)
length(unique(md$pop))
latlong <- subset(ct_metadata, select=c(long,lat))
#if not re-running preceding code, read in cross entropy results
k_min_cross <- read.table("k_cross_entropy", header=TRUE, sep="\t")
plot(x=k_min_cross$k, y=k_min_cross$med_cross, col="black")
#check delta cross entropies to determine when change in cross entropy decreases
k_vec_offset<-k_vec[-1]
#estimate admixture coefficients assuming different values of K supported by TESS3
k_vec<-c(seq(from=1, to=40, by=1))
#check delta cross entropies to determine when change in cross entropy decreases
k_vec_offset <- k_vec[-1]
k_delta_ce <- as.data.frame(matrix(NA, nrow=length(k_vec_offset), ncol=2))
colnames(k_delta_ce) <- c("k", "delta_ce")
for (i in 1:length(k_vec_offset)){
k_delta_ce$k[i] <- k_vec_offset[i]
k_delta_ce$delta_ce[i] <- k_min_cross$med_cross[k_vec_offset[i]] - k_min_cross$med_cross[k_vec_offset[i]-1]
}
#K=10 is where cross entropy asymptotes
plot(x=k_delta_ce$k, y=k_delta_ce$delta_ce)
plot(x=k_min_cross$k, y=k_min_cross$med_cross, col="black")
#isolate best replicate of K = 12
best<-which.min(cross.entropy(lfmm_snmf, K=12))
#load in imputed genotype matrix
lfmm_imputed_genotype_matrix<-read.matrix("ct.lfmm_imputed.lfmm", header=FALSE, sep=" ")
#save copy of imputed genotype matrix for manipulation
imputed_geno<-lfmm_imputed_genotype_matrix
test<-data.frame(matrix(ncol=dim(imputed_geno)[2]*2, nrow=dim(imputed_geno)[1]))
View(test)
inds<-seq(1, dim(test)[2], by=2)
inds2<-seq(2, dim(test)[2], by=2)
test[,inds]<-imputed_geno
test[,inds2]<-abs(test[,inds]-2)
View(test)
geno_matrix <- data.frame(matrix(ncol=dim(imputed_geno)[2]*2, nrow=dim(imputed_geno)[1]))
loci <- seq(1, dim(geno_matrix)[2], by=2)
loci2 <- seq(2, dim(geno_matrix)[2], by=2)
geno_matrix [,loci] <- imputed_geno
geno_matrix[,loci2] <- abs(geno_matrix[,loci]-2)
View(geno_matrix)
#convert to integer
geno_matrix_unlist<-as.integer(unlist(geno_matrix))
geno_matrix_int<-data.frame(matrix(ncol=ncol(geno_matrix), nrow=nrow(geno_matrix), data=geno_matrix_unlist))
#create genind object out of original VCF
stq_vcf<-read.vcfR("ct.vcf")
#create genind object out of original VCF
ct_vcf<-read.vcfR("ct.vcf")
ct_genind<-vcfR2genind(ct_vcf)
#insert imputed genotype matrix into copy of genind
ct_genind_imp <- ct_genind
ct_genind_imp$tab <- as.matrix(geno_matrix_int)
#if not re-running preceding code, read in PCA results
ct_int_pca <- readRDS("ct_pca_Rfile")
#make screeplot (visualize % explained variance for each PC)
##PC1 and PC2 explain quite a bit of variance; PC1 most important for explaining pop structure (DAPC result)
fviz_eig(stq_int_pca)
#make screeplot (visualize % explained variance for each PC)
##PC1 and PC2 explain quite a bit of variance; PC1 most important for explaining pop structure (DAPC result)
fviz_eig(ct_int_pca)
pvariance<-data.frame(PC=seq(from=1, to=length(stq_int_pca$eig), by=1), pvar=stq_int_pca$eig/sum(stq_int_pca$eig)*100)
pvariance<-data.frame(PC=seq(from=1, to=length(ct_int_pca$eig), by=1), pvar=ct_int_pca$eig/sum(ct_int_pca$eig)*100)
scree<-ggplot()+
geom_line(data=pvariance[1:20,], aes(x=PC, y=pvar), size=1, colour="gray50")+
geom_point(data=pvariance[1:20,], aes(x=PC, y=pvar), size=2, colour="gray50")+
scale_x_discrete(limits=c(seq(from=1, to=20, by=1)))+
xlab("PC")+
ylab("Percent variance explained")+
theme_bw()
scree
#create PCA df
pc_df <- data.frame(samp_id=md$sample, pop=md$pop, region_name=md$region_name, long=md$long, lat=md$lat, pc1=ct_int_pca$li[,1], pc2=ct_int_pca$li[,2], pc3=ct_int_pca$li[,3])
pc_df_NE<-pc_df[which(pc_df$region_name=="NE"),]
pc_df_NW<-pc_df[which(pc_df$region_name=="NW"),]
pc_df_S<-pc_df[which(pc_df$region_name=="S"),]
#color by latitude
pca_lat<-ggplot()+
geom_point(data=pc_df, aes(x=pc1, y=pc2, shape=region_name, colour=lat), size=2)+
scale_color_gradient(low = "blue", high = "gold")+
scale_x_continuous(limits=c(-50, 50))+
scale_y_continuous(limits=c(-40, 40))+
labs(colour="Latitude", shape="Region")+
xlab("PC1 (7.18%)")+
ylab("PC2 (2.53%)")+
geom_hline(yintercept=0, linetype="dashed")+
geom_vline(xintercept=0, linetype="dashed")+
theme_bw()
pca_lat
#color regions by latitude; separate palettes
pca_lat_reg<-ggplot(mapping=aes(x=pc1, y=pc2, shape=region_name))+
geom_point(data = pc_df_NE, aes(color = lat)) +
scale_color_gradientn("Latitude (NE)", colors = c('tomato4', 'tomato1')) +
new_scale_color() +
geom_point(data = pc_df_NW, aes(color = lat)) +
scale_color_gradientn("Latitude (NW)", colors = c('steelblue4', 'steelblue1')) +
new_scale_color() +
geom_point(data = pc_df_S, aes(color = lat)) +
scale_color_gradientn("Latitude (S)", colors = c('gold4', 'lightgoldenrod2'))+
guides(shape=FALSE)+
xlab("PC1 (7.18%)")+
ylab("PC2 (2.53%)")+
geom_hline(yintercept=0, linetype="dashed")+
geom_vline(xintercept=0, linetype="dashed")+
theme_bw()
pca_lat_reg
#add sampling region information
pc_df_NE<-pc_df[which(pc_df$region_name=="NE"),]
pc_df_NW<-pc_df[which(pc_df$region_name=="NW"),]
pc_df_S<-pc_df[which(pc_df$region_name=="S"),]
#plot
pal <- c("tan1", "turquoise3", "slateblue3")
p_pca<-ggplot()+
geom_point(data=ct_pca_df, aes(x=pc1, y=pc2, colour=as.factor(region_name)), size=2, alpha=0.33)+
geom_hline(yintercept=0, linetype="dashed")+
geom_vline(xintercept=0, linetype="dashed")+
scale_colour_manual(values=pal)+
scale_x_continuous(limits=c(-50, 50), breaks=seq(from=-50, to=50, by=10), expand=c(0,0))+
scale_y_continuous(limits=c(-45, 45), breaks=seq(from=-50, to=50, by=10), expand=c(0,0))+
labs(x="PC1 (7.18%)", y="PC2 (2.53%)", colour="Region")+
theme_bw()+
theme(legend.position=c(0.15,0.15))+
theme(axis.title.x = element_text(size=18, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 10, b = 0, l = 0)))+
theme(axis.text.x = element_text(size=14), axis.text.y = element_text(size=14))+
theme(legend.title = element_text(size=16), legend.text = element_text(size=14))+
theme(plot.margin = margin(t = plot_marg, r = plot_marg, b = plot_marg, l = plot_marg))
#create PCA df
ct_pca_df <- data.frame(samp_id=md$sample, pop=md$pop, region_name=md$region_name, long=md$long, lat=md$lat, pc1=ct_int_pca$li[,1], pc2=ct_int_pca$li[,2], pc3=ct_int_pca$li[,3])
#plot
pal <- c("tan1", "turquoise3", "slateblue3")
p_pca<-ggplot()+
geom_point(data=ct_pca_df, aes(x=pc1, y=pc2, colour=as.factor(region_name)), size=2, alpha=0.33)+
geom_hline(yintercept=0, linetype="dashed")+
geom_vline(xintercept=0, linetype="dashed")+
scale_colour_manual(values=pal)+
scale_x_continuous(limits=c(-50, 50), breaks=seq(from=-50, to=50, by=10), expand=c(0,0))+
scale_y_continuous(limits=c(-45, 45), breaks=seq(from=-50, to=50, by=10), expand=c(0,0))+
labs(x="PC1 (7.18%)", y="PC2 (2.53%)", colour="Region")+
theme_bw()+
theme(legend.position=c(0.15,0.15))+
theme(axis.title.x = element_text(size=18, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 10, b = 0, l = 0)))+
theme(axis.text.x = element_text(size=14), axis.text.y = element_text(size=14))+
theme(legend.title = element_text(size=16), legend.text = element_text(size=14))+
theme(plot.margin = margin(t = plot_marg, r = plot_marg, b = plot_marg, l = plot_marg))
p_pca
#plot parameters
plot_marg <- 15
pal <- c("tan1", "turquoise3", "slateblue3")
p_pca<-ggplot()+
geom_point(data=ct_pca_df, aes(x=pc1, y=pc2, colour=as.factor(region_name)), size=2, alpha=0.33)+
geom_hline(yintercept=0, linetype="dashed")+
geom_vline(xintercept=0, linetype="dashed")+
scale_colour_manual(values=pal)+
scale_x_continuous(limits=c(-50, 50), breaks=seq(from=-50, to=50, by=10), expand=c(0,0))+
scale_y_continuous(limits=c(-45, 45), breaks=seq(from=-50, to=50, by=10), expand=c(0,0))+
labs(x="PC1 (7.18%)", y="PC2 (2.53%)", colour="Region")+
theme_bw()+
theme(legend.position=c(0.15,0.15))+
theme(axis.title.x = element_text(size=18, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 10, b = 0, l = 0)))+
theme(axis.text.x = element_text(size=14), axis.text.y = element_text(size=14))+
theme(legend.title = element_text(size=16), legend.text = element_text(size=14))+
theme(plot.margin = margin(t = plot_marg, r = plot_marg, b = plot_marg, l = plot_marg))
p_pca
p_pca<-ggplot()+
geom_point(data=ct_pca_df, aes(x=pc1, y=pc2, colour=as.factor(region_name)), size=2.5, alpha=0.5)+
geom_hline(yintercept=0, linetype="dashed")+
geom_vline(xintercept=0, linetype="dashed")+
scale_colour_manual(values=pal)+
scale_x_continuous(limits=c(-50, 50), breaks=seq(from=-50, to=50, by=10), expand=c(0,0))+
scale_y_continuous(limits=c(-45, 45), breaks=seq(from=-50, to=50, by=10), expand=c(0,0))+
labs(x="PC1 (7.18%)", y="PC2 (2.53%)", colour="Region")+
theme_bw()+
theme(legend.position=c(0.15,0.15))+
theme(axis.title.x = element_text(size=18, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 10, b = 0, l = 0)))+
theme(axis.text.x = element_text(size=14), axis.text.y = element_text(size=14))+
theme(legend.title = element_text(size=16), legend.text = element_text(size=14))+
theme(plot.margin = margin(t = plot_marg, r = plot_marg, b = plot_marg, l = plot_marg))
p_pca
ggsave("pca_plot.svg", width=12, height=12)
ggsave("pca_plot.svg", width=10, height=10)
ggsave("pca_plot.svg", width=8, height=8)
#load VCF
lfmm_genotypes<-vcf2lfmm(gzfile("ct.vcf.gz"))
#load VCF
##need to gunzip vcf first
lfmm_genotypes<-vcf2lfmm("ct.vcf")
library(vcfR)
#load VCF
##need to gunzip vcf first
lfmm_genotypes<-vcf2lfmm("ct.vcf")
