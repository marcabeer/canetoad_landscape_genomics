#isolate pairwise FST matrix
k6_fst_pair<-k6_fst$pairwise$Fst
diag(k6_fst_pair) <- 0
#make fst matrices symmetric
k6_fst_symm <- Matrix::forceSymmetric(k6_fst_pair, uplo="L")
k6_fst_symm_mat <- matrix(k6_fst_symm, nrow=k6_fst_symm@Dim[1], ncol=k6_fst_symm@Dim[1])
k6_fst_symm_mat[which(k6_fst_symm_mat < 0)] = 0
#convert fst to linearized form (fst/[1 - fst)])
k6_fst_lin <- k6_fst_symm_mat/(1-k6_fst_symm_mat)
#assign genetic cluster based on sample name used to represent the cluster in the genepop
k6_fst_repsamp <- substring(rownames(k6_fst_pair),1, nchar(rownames(k6_fst_pair))-1)
k6_fst_pops <- c()
for (i in 1:length(k6_fst_repsamp)){
k6_fst_pops[i] <- pm_k6_md$tess3_cluster[which(pm_k6_md$sample==k6_fst_repsamp[i])]
}
#make pairwise pop IDs
k6_fst_popcomp <- matrix(data=NA, nrow=length(k6_fst_pops), ncol=length(k6_fst_pops))
for (i in 1:length(k6_fst_pops)){
for (j in 1:length(k6_fst_pops)){
k6_fst_popcomp[i,j] <- paste(min(c(k6_fst_pops[i], k6_fst_pops[j])), max(c(k6_fst_pops[i], k6_fst_pops[j])), sep="_")
}
}
#k=6 data prep
k6_fst_lin_df = data.frame(gendist=as.vector(k6_fst_lin), pop1pop2=as.vector(k6_fst_popcomp))
#attach geodist data
k6_fst_lin_df = merge.data.frame(x=k6_fst_lin_df, y=k6_geodist_df, by.x="pop1pop2", by.y="popcomp")
#split composite pop ID
k6_fst_lin_df = tidyr::separate(k6_fst_lin_df, col="pop1pop2", into=c("pop1", "pop2"), remove=FALSE)
#remove self comparisons
k6_fst_lin_df <- k6_fst_lin_df[-which(k6_fst_lin_df$pop1==k6_fst_lin_df$pop2),]
#remove rows with duplicated two-population indices
k6_fst_lin_df_nodupl <- k6_fst_lin_df[!duplicated(k6_fst_lin_df$pop1pop2),]
###
#run MLPE models for K=6
#create df of model stats
k6_mlpe_mod_stats <- data.frame(k_value=6, AICc_ibd=NA, AICc_null=NA, dAICc_vs_null=NA, effect_geodist_ibd=NA, effect_intercept_ibd=NA, effect_intercept_null=NA)
#run geographic distance model
k6_gls_mlpe_dist = gls(gendist ~ geodist, correlation=corMLPE(form=~pop1+pop2), data=k6_fst_lin_df_nodupl, method="ML")
#run null model
k6_gls_mlpe_null = gls(gendist ~ 1, correlation=corMLPE(form=~pop1+pop2), data=k6_fst_lin_df_nodupl, method="ML")
#calculate AICc
k6_mlpe_mod_stats$AICc_ibd = MuMIn::AICc(k6_gls_mlpe_dist)
k6_mlpe_mod_stats$AICc_null = MuMIn::AICc(k6_gls_mlpe_null)
#compare AICc of geographic distance to null model; negative means geographic distance model is better
k6_mlpe_mod_stats$dAICc_vs_null = k6_mlpe_mod_stats$AICc_ibd - k6_mlpe_mod_stats$AICc_null
#grab model coefficients
k6_mlpe_mod_stats$effect_geodist_ibd = k6_gls_mlpe_dist$coefficients[2]
k6_mlpe_mod_stats$effect_intercept_ibd = k6_gls_mlpe_dist$coefficients[1]
k6_mlpe_mod_stats$effect_intercept_null = k6_gls_mlpe_null$coefficients[1]
#predict data to plot lines
k6_newdata = data.frame(geodist=seq(from=min(k6_fst_lin_df_nodupl$geodist), to=max(k6_fst_lin_df_nodupl$geodist), by=0.01))
k6_trend = data.frame(k_value=6, geodist=k6_newdata, gendist=predict(object=k6_gls_mlpe_dist, newdata=k6_newdata, se=TRUE))
ibd_k6 = ggplot()+
geom_line(data=k6_trend, mapping=aes(x=geodist, y=gendist.fit), size=1.5)+
geom_ribbon(data = k6_trend, aes(x=geodist, ymin = gendist.fit-1.96*gendist.se.fit, ymax = gendist.fit+1.96*gendist.se.fit), alpha=0.25)+
geom_point(data=k6_fst_lin_df_nodupl, aes(x=geodist, y=gendist), size=3, alpha=1)+
theme_bw()+
scale_x_continuous(limits=c(4,8), breaks=seq(from=4, to=8, by=0.5))+
scale_y_continuous(limits=c(0,0.2), breaks=seq(from=0, to=0.2, by=0.05))+
labs(x= "Ln (geographic distance)", y="FST / (1 - FST)", fill="Region", colour="Region")+
theme(axis.title.x = element_text(size=18, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 10, b = 0, l = 0)))+
theme(axis.text.x = element_text(size=14), axis.text.y = element_text(size=14))+
theme(legend.position = "none")+
theme(plot.margin = margin(t = plot_marg, r = plot_marg, b = plot_marg, l = plot_marg))
##############################
#K = 7
##############################
#create metadata
pm_k7_md <- merge.data.frame(md, pm_k7, by="sample", sort=FALSE)
#get mean coordinates of each of K genetic clusters
pm_k7_popsumm <- pm_k7_md %>%
group_by(pop) %>%
summarise(long=mean(long), lat=mean(lat), tess3_cluster=round(mean(tess3_cluster), 0)) %>%
group_by(tess3_cluster) %>%
summarise(long=mean(long), lat=mean(lat), tess3_cluster=mean(tess3_cluster))
#calculate geodesic distance between each of K genetic clusters
##natural log for IBD analysis
k7_geodist = ln(geodist(x=data.frame(long=pm_k7_popsumm$long, lat=pm_k7_popsumm$lat), measure="geodesic")/1000)
#replace -Inf diagonal with 0s
diag(k7_geodist) = 0
#reorganize geodesic distance matrix with correct population order
k7_dist_pops <- pm_k7_popsumm$tess3_cluster
k7_dist_popcomp <- matrix(data=NA, nrow=length(k7_dist_pops), ncol=length(k7_dist_pops))
for (i in 1:length(k7_dist_pops)){
for (j in 1:length(k7_dist_pops)){
k7_dist_popcomp[i,j] <- paste(min(c(k7_dist_pops[i], k7_dist_pops[j])), max(c(k7_dist_pops[i], k7_dist_pops[j])), sep="_")
}
}
k7_geodist_df = data.frame(geodist=as.vector(k7_geodist), popcomp=as.vector(k7_dist_popcomp))
#retrieve pairwise FST values
#k7_fst <- diveRsity::diffCalc(infile="tess3_k7_genepop.txt", fst=TRUE, pairwise=TRUE)
k7_fst<-readRDS("fst_k7")
#isolate pairwise FST matrix
k7_fst_pair<-k7_fst$pairwise$Fst
diag(k7_fst_pair) <- 0
#make fst matrices symmetric
k7_fst_symm <- Matrix::forceSymmetric(k7_fst_pair, uplo="L")
k7_fst_symm_mat <- matrix(k7_fst_symm, nrow=k7_fst_symm@Dim[1], ncol=k7_fst_symm@Dim[1])
k7_fst_symm_mat[which(k7_fst_symm_mat < 0)] = 0
#convert fst to linearized form (fst/[1 - fst)])
k7_fst_lin <- k7_fst_symm_mat/(1-k7_fst_symm_mat)
#assign genetic cluster based on sample name used to represent the cluster in the genepop
k7_fst_repsamp <- substring(rownames(k7_fst_pair),1, nchar(rownames(k7_fst_pair))-1)
k7_fst_pops <- c()
for (i in 1:length(k7_fst_repsamp)){
k7_fst_pops[i] <- pm_k7_md$tess3_cluster[which(pm_k7_md$sample==k7_fst_repsamp[i])]
}
#make pairwise pop IDs
k7_fst_popcomp <- matrix(data=NA, nrow=length(k7_fst_pops), ncol=length(k7_fst_pops))
for (i in 1:length(k7_fst_pops)){
for (j in 1:length(k7_fst_pops)){
k7_fst_popcomp[i,j] <- paste(min(c(k7_fst_pops[i], k7_fst_pops[j])), max(c(k7_fst_pops[i], k7_fst_pops[j])), sep="_")
}
}
#k=7 data prep
k7_fst_lin_df = data.frame(gendist=as.vector(k7_fst_lin), pop1pop2=as.vector(k7_fst_popcomp))
#attach geodist data
k7_fst_lin_df = merge.data.frame(x=k7_fst_lin_df, y=k7_geodist_df, by.x="pop1pop2", by.y="popcomp")
#split composite pop ID
k7_fst_lin_df = tidyr::separate(k7_fst_lin_df, col="pop1pop2", into=c("pop1", "pop2"), remove=FALSE)
#remove self comparisons
k7_fst_lin_df <- k7_fst_lin_df[-which(k7_fst_lin_df$pop1==k7_fst_lin_df$pop2),]
#remove rows with duplicated two-population indices
k7_fst_lin_df_nodupl <- k7_fst_lin_df[!duplicated(k7_fst_lin_df$pop1pop2),]
###
#run MLPE models for K=7
#create df of model stats
k7_mlpe_mod_stats <- data.frame(k_value=7, AICc_ibd=NA, AICc_null=NA, dAICc_vs_null=NA, effect_geodist_ibd=NA, effect_intercept_ibd=NA, effect_intercept_null=NA)
#run geographic distance model
k7_gls_mlpe_dist = gls(gendist ~ geodist, correlation=corMLPE(form=~pop1+pop2), data=k7_fst_lin_df_nodupl, method="ML")
#run null model
k7_gls_mlpe_null = gls(gendist ~ 1, correlation=corMLPE(form=~pop1+pop2), data=k7_fst_lin_df_nodupl, method="ML")
#calculate AICc
k7_mlpe_mod_stats$AICc_ibd = MuMIn::AICc(k7_gls_mlpe_dist)
k7_mlpe_mod_stats$AICc_null = MuMIn::AICc(k7_gls_mlpe_null)
#compare AICc of geographic distance to null model; negative means geographic distance model is better
k7_mlpe_mod_stats$dAICc_vs_null = k7_mlpe_mod_stats$AICc_ibd - k7_mlpe_mod_stats$AICc_null
#grab model coefficients
k7_mlpe_mod_stats$effect_geodist_ibd = k7_gls_mlpe_dist$coefficients[2]
k7_mlpe_mod_stats$effect_intercept_ibd = k7_gls_mlpe_dist$coefficients[1]
k7_mlpe_mod_stats$effect_intercept_null = k7_gls_mlpe_null$coefficients[1]
#predict data to plot lines
k7_newdata = data.frame(geodist=seq(from=min(k7_fst_lin_df_nodupl$geodist), to=max(k7_fst_lin_df_nodupl$geodist), by=0.01))
k7_trend = data.frame(k_value=7, geodist=k7_newdata, gendist=predict(object=k7_gls_mlpe_dist, newdata=k7_newdata, se=TRUE))
ibd_k7 = ggplot()+
geom_line(data=k7_trend, mapping=aes(x=geodist, y=gendist.fit), size=1.5)+
geom_ribbon(data = k7_trend, aes(x=geodist, ymin = gendist.fit-1.96*gendist.se.fit, ymax = gendist.fit+1.96*gendist.se.fit), alpha=0.25)+
geom_point(data=k7_fst_lin_df_nodupl, aes(x=geodist, y=gendist), size=3, alpha=1)+
theme_bw()+
scale_x_continuous(limits=c(4,8), breaks=seq(from=4, to=8, by=0.5))+
scale_y_continuous(limits=c(0,0.2), breaks=seq(from=0, to=0.2, by=0.05))+
labs(x= "Ln (geographic distance)", y="FST / (1 - FST)", fill="Region", colour="Region")+
theme(axis.title.x = element_text(size=18, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 10, b = 0, l = 0)))+
theme(axis.text.x = element_text(size=14), axis.text.y = element_text(size=14))+
theme(legend.position = "none")+
theme(plot.margin = margin(t = plot_marg, r = plot_marg, b = plot_marg, l = plot_marg))
##############################
#K = 8
##############################
#create metadata
pm_k8_md <- merge.data.frame(md, pm_k8, by="sample", sort=FALSE)
#get mean coordinates of each of K genetic clusters
pm_k8_popsumm <- pm_k8_md %>%
group_by(pop) %>%
summarise(long=mean(long), lat=mean(lat), tess3_cluster=round(mean(tess3_cluster), 0)) %>%
group_by(tess3_cluster) %>%
summarise(long=mean(long), lat=mean(lat), tess3_cluster=mean(tess3_cluster))
#calculate geodesic distance between each of K genetic clusters
##natural log for IBD analysis
k8_geodist = ln(geodist(x=data.frame(long=pm_k8_popsumm$long, lat=pm_k8_popsumm$lat), measure="geodesic")/1000)
#replace -Inf diagonal with 0s
diag(k8_geodist) = 0
#reorganize geodesic distance matrix with correct population order
k8_dist_pops <- pm_k8_popsumm$tess3_cluster
k8_dist_popcomp <- matrix(data=NA, nrow=length(k8_dist_pops), ncol=length(k8_dist_pops))
for (i in 1:length(k8_dist_pops)){
for (j in 1:length(k8_dist_pops)){
k8_dist_popcomp[i,j] <- paste(min(c(k8_dist_pops[i], k8_dist_pops[j])), max(c(k8_dist_pops[i], k8_dist_pops[j])), sep="_")
}
}
k8_geodist_df = data.frame(geodist=as.vector(k8_geodist), popcomp=as.vector(k8_dist_popcomp))
#retrieve pairwise FST values
#k8_fst <- diveRsity::diffCalc(infile="tess3_k8_genepop.txt", fst=TRUE, pairwise=TRUE)
k8_fst<-readRDS("fst_k8")
#isolate pairwise FST matrix
k8_fst_pair<-k8_fst$pairwise$Fst
diag(k8_fst_pair) <- 0
#make fst matrices symmetric
k8_fst_symm <- Matrix::forceSymmetric(k8_fst_pair, uplo="L")
k8_fst_symm_mat <- matrix(k8_fst_symm, nrow=k8_fst_symm@Dim[1], ncol=k8_fst_symm@Dim[1])
k8_fst_symm_mat[which(k8_fst_symm_mat < 0)] = 0
#convert fst to linearized form (fst/[1 - fst)])
k8_fst_lin <- k8_fst_symm_mat/(1-k8_fst_symm_mat)
#assign genetic cluster based on sample name used to represent the cluster in the genepop
k8_fst_repsamp <- substring(rownames(k8_fst_pair),1, nchar(rownames(k8_fst_pair))-1)
k8_fst_pops <- c()
for (i in 1:length(k8_fst_repsamp)){
k8_fst_pops[i] <- pm_k8_md$tess3_cluster[which(pm_k8_md$sample==k8_fst_repsamp[i])]
}
#make pairwise pop IDs
k8_fst_popcomp <- matrix(data=NA, nrow=length(k8_fst_pops), ncol=length(k8_fst_pops))
for (i in 1:length(k8_fst_pops)){
for (j in 1:length(k8_fst_pops)){
k8_fst_popcomp[i,j] <- paste(min(c(k8_fst_pops[i], k8_fst_pops[j])), max(c(k8_fst_pops[i], k8_fst_pops[j])), sep="_")
}
}
#k=8 data prep
k8_fst_lin_df = data.frame(gendist=as.vector(k8_fst_lin), pop1pop2=as.vector(k8_fst_popcomp))
#attach geodist data
k8_fst_lin_df = merge.data.frame(x=k8_fst_lin_df, y=k8_geodist_df, by.x="pop1pop2", by.y="popcomp")
#split composite pop ID
k8_fst_lin_df = tidyr::separate(k8_fst_lin_df, col="pop1pop2", into=c("pop1", "pop2"), remove=FALSE)
#remove self comparisons
k8_fst_lin_df <- k8_fst_lin_df[-which(k8_fst_lin_df$pop1==k8_fst_lin_df$pop2),]
#remove rows with duplicated two-population indices
k8_fst_lin_df_nodupl <- k8_fst_lin_df[!duplicated(k8_fst_lin_df$pop1pop2),]
###
#run MLPE models for K=8
#create df of model stats
k8_mlpe_mod_stats <- data.frame(k_value=8, AICc_ibd=NA, AICc_null=NA, dAICc_vs_null=NA, effect_geodist_ibd=NA, effect_intercept_ibd=NA, effect_intercept_null=NA)
#run geographic distance model
k8_gls_mlpe_dist = gls(gendist ~ geodist, correlation=corMLPE(form=~pop1+pop2), data=k8_fst_lin_df_nodupl, method="ML")
#run null model
k8_gls_mlpe_null = gls(gendist ~ 1, correlation=corMLPE(form=~pop1+pop2), data=k8_fst_lin_df_nodupl, method="ML")
#calculate AICc
k8_mlpe_mod_stats$AICc_ibd = MuMIn::AICc(k8_gls_mlpe_dist)
k8_mlpe_mod_stats$AICc_null = MuMIn::AICc(k8_gls_mlpe_null)
#compare AICc of geographic distance to null model; negative means geographic distance model is better
k8_mlpe_mod_stats$dAICc_vs_null = k8_mlpe_mod_stats$AICc_ibd - k8_mlpe_mod_stats$AICc_null
#grab model coefficients
k8_mlpe_mod_stats$effect_geodist_ibd = k8_gls_mlpe_dist$coefficients[2]
k8_mlpe_mod_stats$effect_intercept_ibd = k8_gls_mlpe_dist$coefficients[1]
k8_mlpe_mod_stats$effect_intercept_null = k8_gls_mlpe_null$coefficients[1]
#predict data to plot lines
k8_newdata = data.frame(geodist=seq(from=min(k8_fst_lin_df_nodupl$geodist), to=max(k8_fst_lin_df_nodupl$geodist), by=0.01))
k8_trend = data.frame(k_value=8, geodist=k8_newdata, gendist=predict(object=k8_gls_mlpe_dist, newdata=k8_newdata, se=TRUE))
ibd_k8 = ggplot()+
geom_line(data=k8_trend, mapping=aes(x=geodist, y=gendist.fit), size=1.5)+
geom_ribbon(data = k8_trend, aes(x=geodist, ymin = gendist.fit-1.96*gendist.se.fit, ymax = gendist.fit+1.96*gendist.se.fit), alpha=0.25)+
geom_point(data=k8_fst_lin_df_nodupl, aes(x=geodist, y=gendist), size=3, alpha=1)+
theme_bw()+
scale_x_continuous(limits=c(4,8), breaks=seq(from=4, to=8, by=0.5))+
scale_y_continuous(limits=c(0,0.2), breaks=seq(from=0, to=0.2, by=0.05))+
labs(x= "Ln (geographic distance)", y="FST / (1 - FST)", fill="Region", colour="Region")+
theme(axis.title.x = element_text(size=18, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 10, b = 0, l = 0)))+
theme(axis.text.x = element_text(size=14), axis.text.y = element_text(size=14))+
theme(legend.position = "none")+
theme(plot.margin = margin(t = plot_marg, r = plot_marg, b = plot_marg, l = plot_marg))
##############################
#K = 9
##############################
#create metadata
pm_k9_md <- merge.data.frame(md, pm_k9, by="sample", sort=FALSE)
#get mean coordinates of each of K genetic clusters
pm_k9_popsumm <- pm_k9_md %>%
group_by(pop) %>%
summarise(long=mean(long), lat=mean(lat), tess3_cluster=round(mean(tess3_cluster), 0)) %>%
group_by(tess3_cluster) %>%
summarise(long=mean(long), lat=mean(lat), tess3_cluster=mean(tess3_cluster))
#calculate geodesic distance between each of K genetic clusters
##natural log for IBD analysis
k9_geodist = ln(geodist(x=data.frame(long=pm_k9_popsumm$long, lat=pm_k9_popsumm$lat), measure="geodesic")/1000)
#replace -Inf diagonal with 0s
diag(k9_geodist) = 0
#reorganize geodesic distance matrix with correct population order
k9_dist_pops <- pm_k9_popsumm$tess3_cluster
k9_dist_popcomp <- matrix(data=NA, nrow=length(k9_dist_pops), ncol=length(k9_dist_pops))
for (i in 1:length(k9_dist_pops)){
for (j in 1:length(k9_dist_pops)){
k9_dist_popcomp[i,j] <- paste(min(c(k9_dist_pops[i], k9_dist_pops[j])), max(c(k9_dist_pops[i], k9_dist_pops[j])), sep="_")
}
}
k9_geodist_df = data.frame(geodist=as.vector(k9_geodist), popcomp=as.vector(k9_dist_popcomp))
#retrieve pairwise FST values
#k9_fst <- diveRsity::diffCalc(infile="tess3_k9_genepop.txt", fst=TRUE, pairwise=TRUE)
k9_fst<-readRDS("fst_k9")
#isolate pairwise FST matrix
k9_fst_pair<-k9_fst$pairwise$Fst
diag(k9_fst_pair) <- 0
#make fst matrices symmetric
k9_fst_symm <- Matrix::forceSymmetric(k9_fst_pair, uplo="L")
k9_fst_symm_mat <- matrix(k9_fst_symm, nrow=k9_fst_symm@Dim[1], ncol=k9_fst_symm@Dim[1])
k9_fst_symm_mat[which(k9_fst_symm_mat < 0)] = 0
#convert fst to linearized form (fst/[1 - fst)])
k9_fst_lin <- k9_fst_symm_mat/(1-k9_fst_symm_mat)
#assign genetic cluster based on sample name used to represent the cluster in the genepop
k9_fst_repsamp <- substring(rownames(k9_fst_pair),1, nchar(rownames(k9_fst_pair))-1)
k9_fst_pops <- c()
for (i in 1:length(k9_fst_repsamp)){
k9_fst_pops[i] <- pm_k9_md$tess3_cluster[which(pm_k9_md$sample==k9_fst_repsamp[i])]
}
#make pairwise pop IDs
k9_fst_popcomp <- matrix(data=NA, nrow=length(k9_fst_pops), ncol=length(k9_fst_pops))
for (i in 1:length(k9_fst_pops)){
for (j in 1:length(k9_fst_pops)){
k9_fst_popcomp[i,j] <- paste(min(c(k9_fst_pops[i], k9_fst_pops[j])), max(c(k9_fst_pops[i], k9_fst_pops[j])), sep="_")
}
}
#k=9 data prep
k9_fst_lin_df = data.frame(gendist=as.vector(k9_fst_lin), pop1pop2=as.vector(k9_fst_popcomp))
#attach geodist data
k9_fst_lin_df = merge.data.frame(x=k9_fst_lin_df, y=k9_geodist_df, by.x="pop1pop2", by.y="popcomp")
#split composite pop ID
k9_fst_lin_df = tidyr::separate(k9_fst_lin_df, col="pop1pop2", into=c("pop1", "pop2"), remove=FALSE)
#remove self comparisons
k9_fst_lin_df <- k9_fst_lin_df[-which(k9_fst_lin_df$pop1==k9_fst_lin_df$pop2),]
#remove rows with duplicated two-population indices
k9_fst_lin_df_nodupl <- k9_fst_lin_df[!duplicated(k9_fst_lin_df$pop1pop2),]
###
#run MLPE models for K=9
#create df of model stats
k9_mlpe_mod_stats <- data.frame(k_value=9, AICc_ibd=NA, AICc_null=NA, dAICc_vs_null=NA, effect_geodist_ibd=NA, effect_intercept_ibd=NA, effect_intercept_null=NA)
#run geographic distance model
k9_gls_mlpe_dist = gls(gendist ~ geodist, correlation=corMLPE(form=~pop1+pop2), data=k9_fst_lin_df_nodupl, method="ML")
#run null model
k9_gls_mlpe_null = gls(gendist ~ 1, correlation=corMLPE(form=~pop1+pop2), data=k9_fst_lin_df_nodupl, method="ML")
#calculate AICc
k9_mlpe_mod_stats$AICc_ibd = MuMIn::AICc(k9_gls_mlpe_dist)
k9_mlpe_mod_stats$AICc_null = MuMIn::AICc(k9_gls_mlpe_null)
#compare AICc of geographic distance to null model; negative means geographic distance model is better
k9_mlpe_mod_stats$dAICc_vs_null = k9_mlpe_mod_stats$AICc_ibd - k9_mlpe_mod_stats$AICc_null
#grab model coefficients
k9_mlpe_mod_stats$effect_geodist_ibd = k9_gls_mlpe_dist$coefficients[2]
k9_mlpe_mod_stats$effect_intercept_ibd = k9_gls_mlpe_dist$coefficients[1]
k9_mlpe_mod_stats$effect_intercept_null = k9_gls_mlpe_null$coefficients[1]
#predict data to plot lines
k9_newdata = data.frame(geodist=seq(from=min(k9_fst_lin_df_nodupl$geodist), to=max(k9_fst_lin_df_nodupl$geodist), by=0.01))
k9_trend = data.frame(k_value=9, geodist=k9_newdata, gendist=predict(object=k9_gls_mlpe_dist, newdata=k9_newdata, se=TRUE))
ibd_k9 = ggplot()+
geom_line(data=k9_trend, mapping=aes(x=geodist, y=gendist.fit), size=1.5)+
geom_ribbon(data = k9_trend, aes(x=geodist, ymin = gendist.fit-1.96*gendist.se.fit, ymax = gendist.fit+1.96*gendist.se.fit), alpha=0.25)+
geom_point(data=k9_fst_lin_df_nodupl, aes(x=geodist, y=gendist), size=3, alpha=1)+
theme_bw()+
scale_x_continuous(limits=c(4,8), breaks=seq(from=4, to=8, by=0.5))+
scale_y_continuous(limits=c(0,0.2), breaks=seq(from=0, to=0.2, by=0.05))+
labs(x= "Ln (geographic distance)", y="FST / (1 - FST)", fill="Region", colour="Region")+
theme(axis.title.x = element_text(size=18, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 10, b = 0, l = 0)))+
theme(axis.text.x = element_text(size=14), axis.text.y = element_text(size=14))+
theme(legend.position = "none")+
theme(plot.margin = margin(t = plot_marg, r = plot_marg, b = plot_marg, l = plot_marg))
##############################
#Create multi-panel figure of IBD for TESS3 K = 4 - 9
##############################
ibd_plots <- (ibd_k4 | ibd_k5) / (ibd_k6 | ibd_k7) / (ibd_k8 | ibd_k9) + plot_annotation(tag_levels="A") & theme(plot.tag = element_text(size = 25))
ibd_plots
plot_width <- 12
ggsave(filename="mlpe_ibd_tess3_plots.svg", width=plot_width, height=plot_width*1)
##############################
#Create output table of IBD MLPE models for TESS3 K = 4 - 9
##############################
all_k_mlpe_mod_stats = rbind(k4_mlpe_mod_stats, k5_mlpe_mod_stats, k6_mlpe_mod_stats, k7_mlpe_mod_stats, k8_mlpe_mod_stats, k9_mlpe_mod_stats)
print(all_k_mlpe_mod_stats)
#write.csv(all_k_mlpe_mod_stats, "all_k_mlpe_mod_stats.csv", row.names=FALSE)
ggplot()+
geom_line(data=intraregion_trends, mapping=aes(x=geodist, y=gendist.fit, colour=region), size=1.5)+
scale_colour_manual(values=pal)+
geom_ribbon(data = intraregion_trends, aes(x=geodist, ymin = gendist.fit-1.96*gendist.se.fit, ymax = gendist.fit+1.96*gendist.se.fit, fill=region), alpha=0.25)+
geom_point(data=intraregion_fst_lin_df_nodupl, aes(x=geodist, y=gendist, fill=region), shape=21, size=3, alpha=0.75)+
scale_fill_manual(values=pal)+
theme_bw()+
scale_y_continuous(limits=c(-0.025, 0.3), breaks=seq(from=-0.05, to=0.25, by=0.05), expand=c(0,0))+
scale_x_continuous(limits=c(3.25,6.75), breaks=seq(from=3, to=6.75, by=0.5), expand=c(0,0))+
labs(x= "Ln (geographic distance)", y="FST / 1-FST", fill="Region", colour="Region")+
theme(axis.title.x = element_text(size=18, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 10, b = 0, l = 0)))+
theme(axis.text.x = element_text(size=14), axis.text.y = element_text(size=14))+
theme(legend.position = "none")+
theme(plot.margin = margin(t = plot_marg, r = plot_marg, b = plot_marg, l = plot_marg))
#plot for seminar
ggplot()+
geom_line(data=intraregion_trends, mapping=aes(x=geodist, y=gendist.fit, colour=region), size=1.5)+
scale_colour_manual(values=pal)+
geom_ribbon(data = intraregion_trends, aes(x=geodist, ymin = gendist.fit-1.96*gendist.se.fit, ymax = gendist.fit+1.96*gendist.se.fit, fill=region), alpha=0.25)+
geom_point(data=intraregion_fst_lin_df_nodupl, aes(x=geodist, y=gendist, fill=region), shape=21, size=3, alpha=0.75)+
scale_fill_manual(values=pal)+
theme_bw()+
scale_y_continuous(limits=c(-0.025, 0.3), breaks=seq(from=-0.05, to=0.25, by=0.05), expand=c(0,0))+
scale_x_continuous(limits=c(3.25,6.75), breaks=seq(from=3, to=6.75, by=0.5), expand=c(0,0))+
labs(x= "Ln (geographic distance)", y="FST / 1-FST", fill="Region", colour="Region")+
theme(axis.title.x = element_text(size=20, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size=20, margin = margin(t = 0, r = 10, b = 0, l = 0)))+
theme(axis.text.x = element_text(size=18), axis.text.y = element_text(size=18))+
theme(plot.margin = margin(t = plot_marg, r = plot_marg, b = plot_marg, l = plot_marg))
#plot for seminar
ggplot()+
geom_line(data=intraregion_trends, mapping=aes(x=geodist, y=gendist.fit, colour=region), size=1.5)+
scale_colour_manual(values=pal)+
geom_ribbon(data = intraregion_trends, aes(x=geodist, ymin = gendist.fit-1.96*gendist.se.fit, ymax = gendist.fit+1.96*gendist.se.fit, fill=region), alpha=0.25)+
geom_point(data=intraregion_fst_lin_df_nodupl, aes(x=geodist, y=gendist, fill=region), shape=21, size=3, alpha=0.75)+
scale_fill_manual(values=pal)+
theme_bw()+
scale_y_continuous(limits=c(-0.025, 0.3), breaks=seq(from=-0.05, to=0.25, by=0.05), expand=c(0,0))+
scale_x_continuous(limits=c(3.25,6.75), breaks=seq(from=3, to=6.75, by=0.5), expand=c(0,0))+
labs(x= "Ln (geographic distance)", y="FST / 1-FST", fill="Region", colour="Region")+
theme(axis.title.x = element_text(size=20, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size=20, margin = margin(t = 0, r = 10, b = 0, l = 0)))+
theme(legend.title = element_text(size=20), legend.text = element_text(size=18))+
theme(legend.key.height = unit(0.4, "cm"))+
theme(axis.text.x = element_text(size=18), axis.text.y = element_text(size=18))+
theme(plot.margin = margin(t = plot_marg, r = plot_marg, b = plot_marg, l = plot_marg))
ggsave("mlpe_ibd_localities_seminar.svg", width=10, height=4)
#plot for seminar
ggplot()+
geom_line(data=intraregion_trends, mapping=aes(x=geodist, y=gendist.fit, colour=region), size=1.5)+
scale_colour_manual(values=pal)+
geom_ribbon(data = intraregion_trends, aes(x=geodist, ymin = gendist.fit-1.96*gendist.se.fit, ymax = gendist.fit+1.96*gendist.se.fit, fill=region), alpha=0.25)+
geom_point(data=intraregion_fst_lin_df_nodupl, aes(x=geodist, y=gendist, fill=region), shape=21, size=2.5, alpha=0.75)+
scale_fill_manual(values=pal)+
theme_bw()+
scale_y_continuous(limits=c(-0.025, 0.3), breaks=seq(from=-0.05, to=0.25, by=0.05), expand=c(0,0))+
scale_x_continuous(limits=c(3.25,6.75), breaks=seq(from=3, to=6.75, by=0.5), expand=c(0,0))+
labs(x= "Ln (geographic distance)", y="FST / 1-FST", fill="Region", colour="Region")+
theme(axis.title.x = element_text(size=20, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size=20, margin = margin(t = 0, r = 10, b = 0, l = 0)))+
theme(legend.title = element_text(size=20), legend.text = element_text(size=18))+
theme(legend.key.height = unit(0.4, "cm"))+
theme(axis.text.x = element_text(size=18), axis.text.y = element_text(size=18))+
theme(plot.margin = margin(t = plot_marg, r = plot_marg, b = plot_marg, l = plot_marg))
ggsave("mlpe_ibd_localities_seminar.svg", width=10, height=4)
#plot for seminar
ggplot()+
geom_line(data=intraregion_trends, mapping=aes(x=geodist, y=gendist.fit, colour=region), size=1.5)+
scale_colour_manual(values=pal)+
geom_ribbon(data = intraregion_trends, aes(x=geodist, ymin = gendist.fit-1.96*gendist.se.fit, ymax = gendist.fit+1.96*gendist.se.fit, fill=region), alpha=0.25)+
geom_point(data=intraregion_fst_lin_df_nodupl, aes(x=geodist, y=gendist, fill=region), shape=21, size=2.5, alpha=0.5)+
scale_fill_manual(values=pal)+
theme_bw()+
scale_y_continuous(limits=c(-0.025, 0.3), breaks=seq(from=-0.05, to=0.25, by=0.05), expand=c(0,0))+
scale_x_continuous(limits=c(3.25,6.75), breaks=seq(from=3, to=6.75, by=0.5), expand=c(0,0))+
labs(x= "Ln (geographic distance)", y="FST / 1-FST", fill="Region", colour="Region")+
theme(axis.title.x = element_text(size=20, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size=20, margin = margin(t = 0, r = 10, b = 0, l = 0)))+
theme(legend.title = element_text(size=20), legend.text = element_text(size=18))+
theme(legend.key.height = unit(0.4, "cm"))+
theme(axis.text.x = element_text(size=18), axis.text.y = element_text(size=18))+
theme(plot.margin = margin(t = plot_marg, r = plot_marg, b = plot_marg, l = plot_marg))
#plot for seminar
ggplot()+
geom_line(data=intraregion_trends, mapping=aes(x=geodist, y=gendist.fit, colour=region), size=1.5)+
scale_colour_manual(values=pal)+
geom_ribbon(data = intraregion_trends, aes(x=geodist, ymin = gendist.fit-1.96*gendist.se.fit, ymax = gendist.fit+1.96*gendist.se.fit, fill=region), alpha=0.25)+
geom_point(data=intraregion_fst_lin_df_nodupl, aes(x=geodist, y=gendist, fill=region), shape=21, size=2.5, alpha=0.667)+
scale_fill_manual(values=pal)+
theme_bw()+
scale_y_continuous(limits=c(-0.025, 0.3), breaks=seq(from=-0.05, to=0.25, by=0.05), expand=c(0,0))+
scale_x_continuous(limits=c(3.25,6.75), breaks=seq(from=3, to=6.75, by=0.5), expand=c(0,0))+
labs(x= "Ln (geographic distance)", y="FST / 1-FST", fill="Region", colour="Region")+
theme(axis.title.x = element_text(size=20, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size=20, margin = margin(t = 0, r = 10, b = 0, l = 0)))+
theme(legend.title = element_text(size=20), legend.text = element_text(size=18))+
theme(legend.key.height = unit(0.4, "cm"))+
theme(axis.text.x = element_text(size=18), axis.text.y = element_text(size=18))+
theme(plot.margin = margin(t = plot_marg, r = plot_marg, b = plot_marg, l = plot_marg))
ggsave("mlpe_ibd_localities_seminar.svg", width=10, height=4)
#plot for seminar
ggplot()+
geom_line(data=intraregion_trends, mapping=aes(x=geodist, y=gendist.fit, colour=region), size=1.5)+
scale_colour_manual(values=pal)+
geom_ribbon(data = intraregion_trends, aes(x=geodist, ymin = gendist.fit-1.96*gendist.se.fit, ymax = gendist.fit+1.96*gendist.se.fit, fill=region), alpha=0.25)+
geom_point(data=intraregion_fst_lin_df_nodupl, aes(x=geodist, y=gendist, fill=region), shape=21, size=2.5, alpha=0.667)+
scale_fill_manual(values=pal)+
theme_bw()+
scale_y_continuous(limits=c(-0.025, 0.25), breaks=seq(from=-0.05, to=0.25, by=0.05), expand=c(0,0))+
scale_x_continuous(limits=c(3.25,6.75), breaks=seq(from=3, to=6.75, by=0.5), expand=c(0,0))+
labs(x= "Ln (geographic distance)", y="FST / 1-FST", fill="Region", colour="Region")+
theme(axis.title.x = element_text(size=20, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size=20, margin = margin(t = 0, r = 10, b = 0, l = 0)))+
theme(legend.title = element_text(size=20), legend.text = element_text(size=18))+
theme(legend.key.height = unit(0.4, "cm"))+
theme(axis.text.x = element_text(size=18), axis.text.y = element_text(size=18))+
theme(plot.margin = margin(t = plot_marg, r = plot_marg, b = plot_marg, l = plot_marg))
ggsave("mlpe_ibd_localities_seminar.svg", width=10, height=4)
#plot for seminar
ggplot()+
geom_line(data=intraregion_trends, mapping=aes(x=geodist, y=gendist.fit, colour=region), size=1.5)+
scale_colour_manual(values=pal)+
geom_ribbon(data = intraregion_trends, aes(x=geodist, ymin = gendist.fit-1.96*gendist.se.fit, ymax = gendist.fit+1.96*gendist.se.fit, fill=region), alpha=0.25)+
geom_point(data=intraregion_fst_lin_df_nodupl, aes(x=geodist, y=gendist, fill=region), shape=21, size=2.5, alpha=0.667)+
scale_fill_manual(values=pal)+
theme_bw()+
scale_y_continuous(limits=c(-0.025, 0.27), breaks=seq(from=-0.05, to=0.25, by=0.05), expand=c(0,0))+
scale_x_continuous(limits=c(3.25,6.75), breaks=seq(from=3, to=6.75, by=0.5), expand=c(0,0))+
labs(x= "Ln (geographic distance)", y="FST / 1-FST", fill="Region", colour="Region")+
theme(axis.title.x = element_text(size=20, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size=20, margin = margin(t = 0, r = 10, b = 0, l = 0)))+
theme(legend.title = element_text(size=20), legend.text = element_text(size=18))+
theme(legend.key.height = unit(0.4, "cm"))+
theme(axis.text.x = element_text(size=18), axis.text.y = element_text(size=18))+
theme(plot.margin = margin(t = plot_marg, r = plot_marg, b = plot_marg, l = plot_marg))
ggsave("mlpe_ibd_localities_seminar.svg", width=10, height=4)
#plot for seminar
ggplot()+
geom_line(data=intraregion_trends, mapping=aes(x=geodist, y=gendist.fit, colour=region), size=1.5)+
scale_colour_manual(values=pal)+
geom_ribbon(data = intraregion_trends, aes(x=geodist, ymin = gendist.fit-1.96*gendist.se.fit, ymax = gendist.fit+1.96*gendist.se.fit, fill=region), alpha=0.25)+
geom_point(data=intraregion_fst_lin_df_nodupl, aes(x=geodist, y=gendist, fill=region), shape=21, size=2.5, alpha=0.667)+
scale_fill_manual(values=pal)+
theme_bw()+
scale_y_continuous(limits=c(-0.025, 0.27), breaks=seq(from=-0.05, to=0.25, by=0.05), expand=c(0,0))+
scale_x_continuous(limits=c(3.25,6.75), breaks=seq(from=3, to=6.75, by=0.5), expand=c(0,0))+
labs(x= "Ln (geographic distance)", y="FST / 1-FST\n", fill="Region", colour="Region")+
theme(axis.title.x = element_text(size=20, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size=20, margin = margin(t = 0, r = 10, b = 0, l = 0)))+
theme(legend.title = element_text(size=20), legend.text = element_text(size=18))+
theme(legend.key.height = unit(0.4, "cm"))+
theme(axis.text.x = element_text(size=18), axis.text.y = element_text(size=18))+
theme(plot.margin = margin(t = plot_marg, r = plot_marg, b = plot_marg, l = plot_marg))
ggsave("mlpe_ibd_localities_seminar.svg", width=10, height=4)
