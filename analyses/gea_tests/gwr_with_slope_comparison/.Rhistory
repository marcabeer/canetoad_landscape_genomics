#for exit seminar
seminar_pairplot = ggscatter(refit_betas_summ_snp_unlinked, x = "region", y = "env_beta_mean",
color = "white", alpha=0)+
stat_compare_means(method="wilcox.test", paired=TRUE, comparisons = my_comparisons, label="p.format", symnum.args=sig_symbols, size=7)+
geom_line(refit_betas_summ_snp_unlinked, mapping=aes(x=region, y=env_beta_mean, group = snp), colour="gray50", size=0.67)+
geom_point(refit_betas_summ_snp_unlinked, mapping=aes(x = region, y = env_beta_mean, fill=region), shape=21, colour="black", size=3) +
scale_fill_manual(values=pal)+
#geom_line(refit_betas_summ_snp_unlinked, mapping=aes(x=region, y=env_beta_mean, group = snp), colour="gray50", size=0.67)+
labs(fill="Region", colour="Region", x="Region", y="GWR environmental\slope")+
theme_bw()+
theme(axis.title.x = element_text(size=18, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 10, b = 0, l = 0)))+
theme(axis.text.x=element_text(size=14), axis.text.y=element_text(size=14),
axis.title.x=element_text(size=18), axis.title.y=element_text(size=18),
legend.title=element_text(size=18), legend.text=element_text(size=14))+
theme(legend.position = c(0.9, 0.75))
overlap_pairplot <- ggscatter(refit_betas_summ_snp_unlinked, x = "region", y = "env_beta_mean",
color = "white", alpha=0)+
stat_compare_means(method="wilcox.test", paired=TRUE, comparisons = my_comparisons, label="p.format", symnum.args=sig_symbols, size=7)+
geom_line(refit_betas_summ_snp_unlinked, mapping=aes(x=region, y=env_beta_mean, group = snp), colour="gray50", size=0.67)+
geom_point(refit_betas_summ_snp_unlinked, mapping=aes(x = region, y = env_beta_mean, fill=region), shape=21, colour="black", size=3) +
scale_fill_manual(values=pal)+
#geom_line(refit_betas_summ_snp_unlinked, mapping=aes(x=region, y=env_beta_mean, group = snp), colour="gray50", size=0.67)+
labs(fill="Region", colour="Region", x="Region", y="Absolute GWR\nenvironmental beta coefficient")+
theme_bw()+
theme(axis.title.x = element_text(size=18, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 10, b = 0, l = 0)))+
theme(axis.text.x=element_text(size=14), axis.text.y=element_text(size=14),
axis.title.x=element_text(size=18), axis.title.y=element_text(size=18),
legend.title=element_text(size=18), legend.text=element_text(size=14))+
theme(legend.position = c(0.9, 0.75))
overlap_pairplot
#for exit seminar
seminar_pairplot <- ggscatter(refit_betas_summ_snp_unlinked, x = "region", y = "env_beta_mean",
color = "white", alpha=0)+
stat_compare_means(method="wilcox.test", paired=TRUE, comparisons = my_comparisons, label="p.format", symnum.args=sig_symbols, size=7)+
geom_line(refit_betas_summ_snp_unlinked, mapping=aes(x=region, y=env_beta_mean, group = snp), colour="gray50", size=0.67)+
geom_point(refit_betas_summ_snp_unlinked, mapping=aes(x = region, y = env_beta_mean, fill=region), shape=21, colour="black", size=3) +
scale_fill_manual(values=pal)+
#geom_line(refit_betas_summ_snp_unlinked, mapping=aes(x=region, y=env_beta_mean, group = snp), colour="gray50", size=0.67)+
labs(fill="Region", colour="Region", x="Region", y="Absolute GWR\nenvironmental beta coefficient")+
theme_bw()+
theme(axis.title.x = element_text(size=18, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 10, b = 0, l = 0)))+
theme(axis.text.x=element_text(size=14), axis.text.y=element_text(size=14),
axis.title.x=element_text(size=18), axis.title.y=element_text(size=18),
legend.title=element_text(size=18), legend.text=element_text(size=14))+
theme(legend.position = c(0.9, 0.75))
seminar_pairplot
#for exit seminar
seminar_pairplot <- ggscatter(refit_betas_summ_snp_unlinked, x = "region", y = "env_beta_mean",
color = "white", alpha=0)+
stat_compare_means(method="wilcox.test", paired=TRUE, comparisons = my_comparisons, label="p.format", symnum.args=sig_symbols, size=7)+
geom_line(refit_betas_summ_snp_unlinked, mapping=aes(x=region, y=env_beta_mean, group = snp), colour="gray50", size=0.67)+
geom_point(refit_betas_summ_snp_unlinked, mapping=aes(x = region, y = env_beta_mean, fill=region), shape=21, colour="black", size=3) +
scale_fill_manual(values=pal)+
#geom_line(refit_betas_summ_snp_unlinked, mapping=aes(x=region, y=env_beta_mean, group = snp), colour="gray50", size=0.67)+
labs(fill="Region", colour="Region", x="Region", y="GWR environmental\nslope")+
theme_bw()+
theme(axis.title.x = element_text(size=18, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 10, b = 0, l = 0)))+
theme(axis.text.x=element_text(size=14), axis.text.y=element_text(size=14),
axis.title.x=element_text(size=18), axis.title.y=element_text(size=18),
legend.title=element_text(size=18), legend.text=element_text(size=14))+
theme(legend.position = c(0.9, 0.75))
seminar_pairplot
#for exit seminar
seminar_pairplot <- ggscatter(refit_betas_summ_snp_unlinked, x = "region", y = "env_beta_mean",
color = "white", alpha=0)+
stat_compare_means(method="wilcox.test", paired=TRUE, comparisons = my_comparisons, label="p.format", symnum.args=sig_symbols, size=7)+
geom_line(refit_betas_summ_snp_unlinked, mapping=aes(x=region, y=env_beta_mean, group = snp), colour="gray50", size=0.67)+
geom_point(refit_betas_summ_snp_unlinked, mapping=aes(x = region, y = env_beta_mean, fill=region), shape=21, colour="black", size=3) +
scale_fill_manual(values=pal)+
#geom_line(refit_betas_summ_snp_unlinked, mapping=aes(x=region, y=env_beta_mean, group = snp), colour="gray50", size=0.67)+
labs(fill="Region", colour="Region", x="Region", y="GWR environmental slope")+
theme_bw()+
theme(axis.title.x = element_text(size=18, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 10, b = 0, l = 0)))+
theme(axis.text.x=element_text(size=14), axis.text.y=element_text(size=14),
axis.title.x=element_text(size=18), axis.title.y=element_text(size=18),
legend.title=element_text(size=18), legend.text=element_text(size=14))+
theme(legend.position = c(0.9, 0.75))
seminar_pairplot
ggsave(filename="gwr_overlap_unlinked_pairplot_for_seminar.svg", width=7, height=8)
#for exit seminar
seminar_pairplot <- ggscatter(refit_betas_summ_snp_unlinked, x = "region", y = "env_beta_mean",
color = "white", alpha=0)+
stat_compare_means(method="wilcox.test", paired=TRUE, comparisons = my_comparisons, label="p.format", symnum.args=sig_symbols, size=7)+
geom_line(refit_betas_summ_snp_unlinked, mapping=aes(x=region, y=env_beta_mean, group = snp), colour="gray50", size=0.67)+
geom_point(refit_betas_summ_snp_unlinked, mapping=aes(x = region, y = env_beta_mean, fill=region), shape=21, colour="black", size=3) +
scale_fill_manual(values=pal)+
#geom_line(refit_betas_summ_snp_unlinked, mapping=aes(x=region, y=env_beta_mean, group = snp), colour="gray50", size=0.67)+
labs(fill="Region", colour="Region", x="Region", y="GWR environmental slope")+
theme_bw()+
theme(axis.title.x = element_text(size=20, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size=20, margin = margin(t = 0, r = 10, b = 0, l = 0)))+
theme(axis.text.x=element_text(size=18), axis.text.y=element_text(size=18),
axis.title.x=element_text(size=20), axis.title.y=element_text(size=20),
legend.title=element_text(size=18), legend.text=element_text(size=18))+
theme(legend.position = c(0.9, 0.75))
seminar_pairplot
#for exit seminar
seminar_pairplot <- ggscatter(refit_betas_summ_snp_unlinked, x = "region", y = "env_beta_mean",
color = "white", alpha=0)+
stat_compare_means(method="wilcox.test", paired=TRUE, comparisons = my_comparisons, label="p.format", symnum.args=sig_symbols, size=7)+
geom_line(refit_betas_summ_snp_unlinked, mapping=aes(x=region, y=env_beta_mean, group = snp), colour="gray50", size=0.67)+
geom_point(refit_betas_summ_snp_unlinked, mapping=aes(x = region, y = env_beta_mean, fill=region), shape=21, colour="black", size=3) +
scale_fill_manual(values=pal)+
#geom_line(refit_betas_summ_snp_unlinked, mapping=aes(x=region, y=env_beta_mean, group = snp), colour="gray50", size=0.67)+
labs(fill="Region", colour="Region", x="Region", y="GWR environmental slope")+
theme_bw()+
theme(axis.title.x = element_text(size=20, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size=20, margin = margin(t = 0, r = 10, b = 0, l = 0)))+
theme(axis.text.x=element_text(size=18), axis.text.y=element_text(size=18),
axis.title.x=element_text(size=20), axis.title.y=element_text(size=20),
legend.title=element_text(size=20), legend.text=element_text(size=18))+
theme(legend.position = c(0.9, 0.75))
seminar_pairplot
ggsave(filename="gwr_overlap_unlinked_pairplot_for_seminar.svg", width=7, height=8)
ggsave(filename="gwr_overlap_unlinked_pairplot_for_seminar.svg", width=7, height=7)
wilcox_nw_ne <- wilcox.test(refit_betas_summ_snp_unlinked$env_beta_mean[which(refit_betas_summ_snp_unlinked$region=="NW")],
refit_betas_summ_snp_unlinked$env_beta_mean[which(refit_betas_summ_snp_unlinked$region=="NE")],
paired = TRUE, alternative = "two.sided")
wilcox_nw_s <- wilcox.test(refit_betas_summ_snp_unlinked$env_beta_mean[which(refit_betas_summ_snp_unlinked$region=="NW")],
refit_betas_summ_snp_unlinked$env_beta_mean[which(refit_betas_summ_snp_unlinked$region=="S")],
paired = TRUE, alternative = "two.sided")
wilcox_ne_s <- wilcox.test(refit_betas_summ_snp_unlinked$env_beta_mean[which(refit_betas_summ_snp_unlinked$region=="NE")],
refit_betas_summ_snp_unlinked$env_beta_mean[which(refit_betas_summ_snp_unlinked$region=="S")],
paired = TRUE, alternative = "two.sided")
paste("NW:NE", "signed-rank sum T = ", wilcox_nw_ne$statistic, ";", "p =", wilcox_nw_ne$p.value, sep=" ")
paste("NW:S", "signed-rank sum T = ", wilcox_nw_s$statistic, ";", "p =", wilcox_nw_s$p.value, sep=" ")
paste("NE:S", "signed-rank sum T = ", wilcox_ne_s$statistic, ";", "p =", wilcox_ne_s$p.value, sep=" ")
.05/3
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(gghalves)
library(patchwork)
##############################
#Load cane toad metadata
##############################
#read metadata
md <- read.table("metadata_individuals", sep="\t", header=TRUE)
md_pop <- md[!duplicated(md$pop),][,-1]
#read environmental data (includes colonization year)
env <- read.table("env_filtered", sep="\t", header=TRUE)
##############################
#Run diveRsity to obtain He, Ho, FIS, and rarefied Allelic richness (Ar)
##############################
#specify input genepop
input <- "~/localities_genepop.txt"
#specify number of bootstraps for FIS estimation
fis_bootstraps <- 5000
#run diveRsity
#fis <- diveRsity::basicStats(infile=input, fis_ci=TRUE, fis_boots=fis_bootstraps, rarefaction=TRUE)
#saveRDS(object=fis, file="fis_localities")
#if not re-running above code, read in diveRsity output here:
fis <- readRDS("fis_localities")
#isolate overall (i.e., multilocus) estimates of diversity metrics
div_pars <- as.data.frame(matrix(data=NA, ncol=nrow(fis$main_tab[[1]]), nrow=length(fis$main_tab)))
colnames(div_pars) <- rownames(fis$main_tab[[1]])
for (i in 1:length(fis$main_tab)){
div_pars[i,] <- fis$main_tab[[i]][,5724]
}
div_pops <- data.frame(md_pop, env[,-1], div_pars)
#if not re-running above code, read in diveRsity output here:
fis <- readRDS("fis_localities")
#PCA packages
library(vegan)
#GWR-related packages
library(GWmodel)
library(sp)
#parallel computing
library(parallel)
#data manipulation
library(dplyr)
library(plotrix)
#plotting packages
library(ggplot2)
library(scales)
library(patchwork)
library(ggpubr)
#remotes::install_version("dplyr", version="1.0.10")
#geographic data plotting
library("rnaturalearth")
library("rnaturalearthhires")
library("rnaturalearthdata")
##############################
#Load cane toad metadata
##############################
md <- read.table("metadata_individuals", sep="\t", header=TRUE)
md_pop <- md[!duplicated(md$pop),][,-1]
##############################
#read in environmental data
##############################
env <- read.table("env_filtered", header=TRUE, sep="\t")
##############################
#read in locality allele frequency data
##############################
freq <- read.table("allele_freq", header=TRUE, sep="\t")
#format data to input into GWR
env_df <- data.frame(env[,-c(1:3)], PopStruct[,-1], freq_pca[,-1])
xy <- env[,2:3]
#save copy of allele frequency matrix
freq_pca <- freq
#there are 20 instances where a population is missing allele frequency data at a SNP
##replace with median allele frequency for that SNP
sum(is.na(freq_pca))
for (i in 1:ncol(freq_pca)){
freq_pca[which(is.na(freq_pca[,i])),i] <- median(freq_pca[-which(is.na(freq_pca[,i])),i], na.rm=TRUE)
}
#run PCA
pca <- rda(freq_pca[,-1], scale=T) # PCA in vegan uses the rda() call without any predictors
#make screeplot
screeplot(pca, type = "barplot", npcs=15, main="PCA Eigenvalues")
#get % variance explained by first two eigenvalues
pca$CA$eig[1]/sum(pca$CA$eig)
pca$CA$eig[2]/sum(pca$CA$eig)
#get locality PC scores for first two axes
##represent neutral population structure for GWR
PCs <- scores(pca, choices=c(1:2), display="sites", scaling=0)
PopStruct <- data.frame(pop=freq[,1], PCs)
colnames(PopStruct) <- c("pop", "PC1", "PC2")
#format data to input into GWR
env_df <- data.frame(env[,-c(1:3)], PopStruct[,-1], freq_pca[,-1])
xy <- env[,2:3]
spdf <- SpatialPointsDataFrame(coords = xy, data = env_df,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
#save raw results
#saveRDS(gwr_run, "gwr_output_03032023")
gwr_result <- readRDS("gwr_output_03032023")
###
#reformat GWR output
gwr_result_df <- as.data.frame(do.call(rbind, gwr_result))
#if not re-running GWR, load in our data
setwd("C:/Users/icepi/Documents/GitHub/canetoad_landscape_genomics/analyses/gea_tests/gwr_with_slope_comparison")
gwr_result_df <- read.table("GWR_results_03032023_df", header=TRUE, sep="\t")
#identify SNPs with Bayes Factors in the top 0.05 quantile
gwr_result_df_sig <- gwr_result_df[which(gwr_result_df$bf>quantile(gwr_result_df$bf, 0.95)),]
min(gwr_result_df_sig$bf)
##############################
#overlap significant SNPs identified by GWR with those identified by Bayenv2
##############################
#load in significant BayEnv GEAs
be_sig <- sort(unique(unlist(readRDS("be_gea_sig_kf_r95"))))
#keep only the SNPs in the top 5% GWR results that ALSO overlap with BayEnv detections
sig_intersect <- gwr_result_df[intersect(gwr_result_df_sig$snp, be_sig),]
#load locus information
##uses locus missingness output from vcftools
lmiss <- read.table("ct_lmiss.lmiss", sep="\t", header=TRUE)
#intersect GWR and Bayenv2 significant SNPs
be_gwr_snp_intersect <- lmiss[sig_intersect$snp,1:2]
#obtain the total set of significant SNPs identified by EITHER GWR or Bayenv2
be_gwr_snp_all <- lmiss[sort(unique(c(gwr_result_df_sig$snp, be_sig))), 1:2]
#save SNPs without significant GEAs to a dataset of putatively neutral loci
snp_neutral <- lmiss[-sort(unique(c(gwr_result_df_sig$snp, be_sig))), 1:2]
#format data for GWR
env_df_refit <- data.frame(scale(env[,-c(1:3)], center=TRUE, scale=TRUE), PopStruct[,-1], freq_pca[,-1])
xy <- env[,2:3]
spdf_refit <- SpatialPointsDataFrame(coords = xy, data = env_df_refit,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
###
#refit models
refit_models <- list()
for (i in 1:nrow(sig_intersect)){
refit_gwr <- bw.gwr(formula=sig_intersect$formula[i], data=spdf_refit, dMat=gw.dist, adaptive=FALSE)
refit_mod <- gwr.basic(formula=sig_intersect$formula[i], data=spdf_refit, dMat=gw.dist, bw=refit_gwr)
refit_out <- list(gwr=refit_gwr, mod=refit_mod)
refit_models[[i]] <- refit_out
}
##############################
#overlap significant SNPs identified by GWR with those identified by Bayenv2
##############################
#load in significant BayEnv GEAs
be_sig <- sort(unique(unlist(readRDS("be_gea_sig_kf_r95"))))
#keep only the SNPs in the top 5% GWR results that ALSO overlap with BayEnv detections
sig_intersect <- gwr_result_df[intersect(gwr_result_df_sig$snp, be_sig),]
View(sig_intersect)
#calculate distance matrix for GWR
gw.dist <- gw.dist(dp.locat=as.matrix(env[,2:3]), longlat=TRUE)
#establish possible models
model_vars_univ <- list(
c("PC1", "PC2", "year"),
c("PC1", "PC2", "year", "bio2"),
c("PC1", "PC2", "year", "bio4"),
c("PC1", "PC2", "year", "bio12"),
c("PC1", "PC2", "year", "elev")
)
paste(colnames(spdf@data)[8], " ~ ", paste0(model_vars_univ[[1]], collapse=" + "), sep="")
#establish function that runs GWR and stores models
evaluate_gwr <- function(locus_index, model_vars, spatialdf, geodist){
covariates <- model_vars
bw_formula <- paste(colnames(spatialdf@data)[locus_index], " ~ ", paste0(model_vars, collapse=" + "), sep="")
bw_calc <- bw.gwr(formula=bw_formula, data=spatialdf, dMat=geodist, adaptive=FALSE)
bw_mod <- gwr.basic(formula=bw_formula, data=spatialdf, dMat=geodist, bw=bw_calc)
out <- c(formula=bw_formula, ncovariates=length(model_vars), unlist(bw_mod$GW.diagnostic))
return(out)
}
#establish function that compares GWR models for a given SNP using an approximate Bayes Factor
choose_top_gwr <- function(x){
modcomp <- as.data.frame(t(sapply(X=model_vars_univ, evaluate_gwr, locus_index=(x+7), spatialdf=spdf, geodist=gw.dist, simplify="array")))
bf_exp <- (as.numeric(modcomp$BIC[which(modcomp$ncovariates==3)]) - as.numeric(modcomp$BIC))/2
bf_exp_inv <- (as.numeric(modcomp$BIC) - as.numeric(modcomp$BIC[which(modcomp$ncovariates==3)]))/2
modcomp$bf <- exp(bf_exp)
modcomp$bf_inv <- exp(bf_exp_inv)
modcomp_ordered <- modcomp[order(modcomp$bf, decreasing=TRUE),]
modcomp_ordered$snp <- x
return(modcomp_ordered[1,])
}
###
#refit models
refit_models <- list()
for (i in 1:nrow(sig_intersect)){
refit_gwr <- bw.gwr(formula=sig_intersect$formula[i], data=spdf_refit, dMat=gw.dist, adaptive=FALSE)
refit_mod <- gwr.basic(formula=sig_intersect$formula[i], data=spdf_refit, dMat=gw.dist, bw=refit_gwr)
refit_out <- list(gwr=refit_gwr, mod=refit_mod)
refit_models[[i]] <- refit_out
}
#extract beta coefficients
refit_betas <- as.data.frame(matrix(data=NA, nrow=1, ncol=2))
colnames(refit_betas) <- c("env", "year")
for (i in 1:length(refit_models)){
betas_temp <- data.frame(refit_models[[i]]$mod[["SDF"]]@data[,5], refit_models[[i]]$mod[["SDF"]]@data[,4])
colnames(betas_temp) <- c("env", "year")
refit_betas <- rbind(refit_betas, betas_temp)
}
refit_betas <- refit_betas[-1,]
#add snp ids
refit_betas$snp <- rep(sig_intersect$snp, each=59)
#add regions
refit_betas$region <- rep(md_pop$region_name, nrow(sig_intersect))
#add latlongs
refit_betas$long <- rep(md_pop$long, nrow(sig_intersect))
refit_betas$lat <- rep(md_pop$lat, nrow(sig_intersect))
View(refit_models)
View(refit_betas)
##############################
#determine directions of GWR slopes for each SNP in each region
##############################
library(gghalves)
ggplot(data=refit_betas, mapping=aes(x=env, fill=region, colour=region))+
geom_half_point()+
geom_vline(xintercept=0)+
theme_bw()
?geom_half_point
ggplot(data=refit_betas, mapping=aes(x=env, fill=region, colour=region))+
geom_half_point()+
coord_flip()+
geom_vline(xintercept=0)+
facet_wrap(~snp)+
theme_bw()
ggplot(data=refit_betas, mapping=aes(x=env, y=region, fill=region, colour=region))+
geom_half_point()+
geom_vline(xintercept=0)+
facet_wrap(~snp)+
theme_bw()
View(refit_betas[which(refit_betas$snp == 4280),])
#get average slopes per SNP per region
refit_betas_summ_regions <- refit_betas %>%
group_by(region, snp) %>%
summarise(env_beta_mean=mean(abs(env)), year_beta_mean=mean(abs(year)), env_beta_se=std.error(abs(env)), year_beta_se=std.error(abs(year)))
View(refit_betas_summ_regions)
ggplot(data=refit_betas, mapping=aes(x=env, y=region, fill=region, colour=region))+
geom_half_point()+
geom_vline(xintercept=0)+
geom_vline(data=refit_betas_summ_regions, vline=env_beta_mean, colour=region)+
facet_wrap(~snp)+
theme_bw()
ggplot(data=refit_betas, mapping=aes(x=env, y=region, fill=region, colour=region))+
geom_half_point()+
geom_vline(xintercept=0)+
geom_vline(vline=refit_betas_summ_regions$env_beta_mean, colour=refit_betas_summ_regions$region)+
facet_wrap(~snp)+
theme_bw()
ggplot(data=refit_betas, mapping=aes(x=env, y=region, fill=region, colour=region))+
geom_half_point()+
geom_vline(xintercept=0)+
geom_vline(xintercept=refit_betas_summ_regions$env_beta_mean, colour=refit_betas_summ_regions$region)+
facet_wrap(~snp)+
theme_bw()
ggplot(data=refit_betas, mapping=aes(x=env, y=region, fill=region, colour=region))+
geom_half_point()+
geom_vline(xintercept=0)+
geom_vline(data=refit_betas_summ_regions, mapping=aes(xintercept=env_beta_mean, colour=as.factor(region)))+
facet_wrap(~snp)+
theme_bw()
##############################
#determine directions of GWR slopes for each SNP in each region
##############################
library(gghalves)
#get average slopes per SNP per region
refit_betas_summ_regions <- refit_betas %>%
group_by(region, snp) %>%
summarise(env_beta_mean=mean(env), year_beta_mean=mean(year), env_beta_se=std.error(abs(env)), year_beta_se=std.error(abs(year)))
ggplot(data=refit_betas, mapping=aes(x=env, y=region, fill=region, colour=region))+
geom_half_point()+
geom_vline(xintercept=0)+
geom_vline(data=refit_betas_summ_regions, mapping=aes(xintercept=env_beta_mean, colour=as.factor(region)))+
facet_wrap(~snp)+
theme_bw()
ggplot(data=refit_betas, mapping=aes(x=env, y=region, fill=region, colour=region))+
geom_half_point()+
geom_vline(xintercept=0)+
geom_vline(data=refit_betas_summ_regions, mapping=aes(xintercept=env_beta_mean, colour=as.factor(region)))+
facet_wrap(~snp)+
scale_colour_manual(values=pal)+
scale_colour_manual(values=pal)+
theme_bw()
pal <- c("tan1", "turquoise3", "slateblue3")
ggplot(data=refit_betas, mapping=aes(x=env, y=region, fill=region, colour=region))+
geom_half_point()+
geom_vline(xintercept=0)+
geom_vline(data=refit_betas_summ_regions, mapping=aes(xintercept=env_beta_mean, colour=as.factor(region)))+
facet_wrap(~snp)+
scale_colour_manual(values=pal)+
scale_colour_manual(values=pal)+
theme_bw()
ggplot(data=refit_betas, mapping=aes(x=env, y=region, fill=region, colour=region))+
geom_half_point()+
geom_vline(xintercept=0)+
geom_vline(data=refit_betas_summ_regions, mapping=aes(xintercept=env_beta_mean, colour=as.factor(region)))+
facet_wrap(~snp)+
scale_colour_manual(values=pal)+
scale_colour_manual(values=pal)+
theme_bw()
View(refit_betas[which(refit_betas$snp==4280 & refit_betas$region=="NE"),])
mean(refit_betas[which(refit_betas$snp==4280 & refit_betas$region=="NE"),"env"])
ggplot(data=refit_betas, mapping=aes(x=env, y=region, fill=region, colour=region))+
geom_half_point()+
geom_vline(xintercept=0)+
geom_vline(data=refit_betas_summ_regions, mapping=aes(xintercept=env_beta_mean, colour=as.factor(region)))+
scale_x_continuous(limits=c(-0.5, 0.3))+
facet_wrap(~snp)+
scale_colour_manual(values=pal)+
scale_colour_manual(values=pal)+
theme_bw()
ggplot(data=refit_betas, mapping=aes(x=env, y=region, fill=region, colour=region))+
geom_half_point()+
geom_vline(xintercept=0)+
geom_vline(data=refit_betas_summ_regions, mapping=aes(xintercept=env_beta_mean, colour=as.factor(region)))+
scale_x_continuous(limits=c(-0.5, 0.25))+
facet_wrap(~snp)+
scale_colour_manual(values=pal)+
scale_colour_manual(values=pal)+
theme_bw()
ggplot(data=refit_betas, mapping=aes(x=env, y=region, fill=region, colour=region))+
geom_half_point()+
geom_vline(xintercept=0)+
geom_vline(data=refit_betas_summ_regions, mapping=aes(xintercept=env_beta_mean, colour=as.factor(region)))+
scale_x_continuous(limits=c(-0.5, 0.3))+
facet_wrap(~snp)+
scale_colour_manual(values=pal)+
scale_colour_manual(values=pal)+
theme_bw()
ggplot(data=refit_betas, mapping=aes(x=env, y=region, fill=region, colour=region))+
geom_half_point()+
geom_vline(xintercept=0)+
geom_vline(data=refit_betas_summ_regions, mapping=aes(xintercept=env_beta_mean, colour=as.factor(region)))+
scale_x_continuous(limits=c(-0.5, 0.3), breaks=seq(from=-0.5, to=0.3, by=0.1))+
facet_wrap(~snp)+
scale_colour_manual(values=pal)+
scale_colour_manual(values=pal)+
theme_bw()
?geom_half_point
ggplot(data=refit_betas, mapping=aes(x=env, y=region, fill=region, colour=region))+
geom_half_boxplot()+
geom_vline(xintercept=0)+
geom_vline(data=refit_betas_summ_regions, mapping=aes(xintercept=env_beta_mean, colour=as.factor(region)))+
scale_x_continuous(limits=c(-0.5, 0.3), breaks=seq(from=-0.5, to=0.3, by=0.1))+
facet_wrap(~snp)+
scale_colour_manual(values=pal)+
scale_colour_manual(values=pal)+
theme_bw()
ggplot(data=refit_betas, mapping=aes(x=env, y=region, fill=region, colour=region))+
geom_half_point()+
geom_vline(xintercept=0)+
geom_vline(data=refit_betas_summ_regions, mapping=aes(xintercept=env_beta_mean, colour=as.factor(region)))+
scale_x_continuous(limits=c(-0.5, 0.3), breaks=seq(from=-0.5, to=0.3, by=0.1))+
facet_wrap(~snp)+
scale_colour_manual(values=pal)+
scale_colour_manual(values=pal)+
theme_bw()
ggplot(data=refit_betas, mapping=aes(x=env, y=region, fill=region, colour=region))+
geom_point()+
geom_vline(xintercept=0)+
geom_vline(data=refit_betas_summ_regions, mapping=aes(xintercept=env_beta_mean, colour=as.factor(region)))+
scale_x_continuous(limits=c(-0.5, 0.3), breaks=seq(from=-0.5, to=0.3, by=0.1))+
facet_wrap(~snp)+
scale_colour_manual(values=pal)+
scale_colour_manual(values=pal)+
theme_bw()
sign(-1)
sign(-2)
sign(200)
snp_list = unique(refit_betas_summ_regions$snp)
same_sign = rep(NA, length(snp_list))
snp_sign = rep(NA, length(snp_list))
snp_same_sign = rep(NA, length(snp_list))
for (i in 1:length(snp_list)){
data_temp = refit_betas_summ_regions[which(refit_betas_summ_regions$snp == snp_list[i]),]
snp_same_sign[i] = sign(data_temp$env_beta_mean[which(data_temp$region=="NW")]) == sign(data_temp$env_beta_mean[which(data_temp$region=="S")])
}
snp_same_sign
sum(snp_same_sign)
#there are 20 instances where a population is missing allele frequency data at a SNP
##replace with median allele frequency for that SNP
sum(is.na(freq_pca))
#save copy of allele frequency matrix
freq_pca <- freq
#there are 20 instances where a population is missing allele frequency data at a SNP
##replace with median allele frequency for that SNP
sum(is.na(freq_pca))
