library(stringr)
library(raster)
library(rangeBuilder)
##########
#load and manipulate occurrence records
gbif_raw<-readLines("ct_gbif.csv")
test<-str_replace_all(gbif_raw[[2]], pattern="\t\t", replacement="\tNA\t")
#replace successive \t with \tNA\t in order to insert missing NAs
##then split strings at \t
gbif_fillna<-list()
gbif_fillna2<-list()
for (i in 1:length(gbif_raw)){
gbif_fillna[[i]]<-str_replace_all(gbif_raw[[i]], pattern="\t\t", replacement="\tNA\t")
gbif_fillna2[[i]]<-strsplit(gbif_fillna[[i]], split="\t")
}
#keep only first 40 fields (some observations are missing later fields)
gbif_fillna_trunc<-list()
for (i in 1:length(gbif_fillna)){
gbif_fillna_trunc[[i]]<-gbif_fillna2[[i]][[1]][c(1:40)]
}
#turn list into df
gbif<-t(as.data.frame(gbif_fillna_trunc))
colnames(gbif)<-c(gbif[1,])
rownames(gbif)<-1:nrow(gbif)
gbif<-gbif[-1,]
gbif<-data.frame(gbif)
library(lubridate)
gbif_ymd<-ymd(paste(gbif$year, gbif$month, gbif$day, sep="-"))
gbif_yeardec<-decimal_date(gbif_ymd)
View(gbif)
library(stringr)
library(raster)
library(lubridate)
library(rangeBuilder)
##############################
#Process cane toad occurrence records from GBIF
##############################
#load and manipulate occurrence records
gbif_raw <- readLines("ct_gbif.csv")
#test<-str_replace_all(gbif_raw[[2]], pattern="\t\t", replacement="\tNA\t")
#replace successive \t with \tNA\t in order to insert missing NAs
##then split strings at \t
gbif_fillna <- list()
gbif_fillna2 <- list()
for (i in 1:length(gbif_raw)){
gbif_fillna[[i]] <- str_replace_all(gbif_raw[[i]], pattern="\t\t", replacement="\tNA\t")
gbif_fillna2[[i]] <- strsplit(gbif_fillna[[i]], split="\t")
}
#keep only first 40 fields (some observations are missing later fields)
gbif_fillna_trunc <- list()
for (i in 1:length(gbif_fillna)){
gbif_fillna_trunc[[i]] <- gbif_fillna2[[i]][[1]][c(1:40)]
}
#turn list into df
gbif <- t(as.data.frame(gbif_fillna_trunc))
colnames(gbif) <- c(gbif[1,])
rownames(gbif) <- 1:nrow(gbif)
gbif <- gbif[-1,]
gbif<-data.frame(gbif)
#turn occurrence observation dates in to decimal format
gbif_ymd <- ymd(paste(gbif$year, gbif$month, gbif$day, sep="-"))
gbif_yeardec <- decimal_date(gbif_ymd)
#isolate year and coordinates
gbif_all <- data.frame(long=as.numeric(gbif$decimalLongitude), lat=as.numeric(gbif$decimalLatitude), year=gbif_yeardec)
na_year_index <- which(is.na(gbif_all$year))
gbif_all$year[na_year_index] <- gbif$year[na_year_index]
#load in sampling metadata for genetic dataset
ct_sites<-read.table("ct_sites.csv", sep=",", header=TRUE)
ct_sites<-data.frame(long=ct_sites$long, lat=ct_sites$lat, year=2010)
#combine gbif observations and those from the genetic dataset
gbif_all <- data.frame(rbind(gbif_all, ct_sites))
gbif_all <- gbif_all[which(gbif_all$lat > -34.5),]
gbif_all <- gbif_all[which(gbif_all$long > 125),]
#remove unlikely occurrence locations (e.g., central Australia in the desert)
gbif_badlat<-gbif_all$lat < -22
gbif_badlong<-gbif_all$long < 140
gbif_badlat_badlong<-gbif_badlat+gbif_badlong
gbif_all<-gbif_all[-which(gbif_badlat_badlong == 2),]
#save filtered set of occurrence records
write.table(gbif_all, "occurrence_filtered.csv", row.names=FALSE)
library(stringr)
library(raster)
library(lubridate)
library(rangeBuilder)
##############################
#Process cane toad occurrence records from GBIF
##############################
#load and manipulate occurrence records
gbif_raw <- readLines("ct_gbif.csv")
#test<-str_replace_all(gbif_raw[[2]], pattern="\t\t", replacement="\tNA\t")
#replace successive \t with \tNA\t in order to insert missing NAs
##then split strings at \t
gbif_fillna <- list()
gbif_fillna2 <- list()
for (i in 1:length(gbif_raw)){
gbif_fillna[[i]] <- str_replace_all(gbif_raw[[i]], pattern="\t\t", replacement="\tNA\t")
gbif_fillna2[[i]] <- strsplit(gbif_fillna[[i]], split="\t")
}
#keep only first 40 fields (some observations are missing later fields)
gbif_fillna_trunc <- list()
for (i in 1:length(gbif_fillna)){
gbif_fillna_trunc[[i]] <- gbif_fillna2[[i]][[1]][c(1:40)]
}
#turn list into df
gbif <- t(as.data.frame(gbif_fillna_trunc))
colnames(gbif) <- c(gbif[1,])
rownames(gbif) <- 1:nrow(gbif)
gbif <- gbif[-1,]
gbif<-data.frame(gbif)
#turn occurrence observation dates in to decimal format
gbif_ymd <- ymd(paste(gbif$year, gbif$month, gbif$day, sep="-"))
gbif_yeardec <- decimal_date(gbif_ymd)
#isolate year and coordinates
gbif_all <- data.frame(long=as.numeric(gbif$decimalLongitude), lat=as.numeric(gbif$decimalLatitude), year=gbif_yeardec)
na_year_index <- which(is.na(gbif_all$year))
gbif_all$year[na_year_index] <- gbif$year[na_year_index]
#load in sampling metadata for genetic dataset
ct_sites<-read.table("ct_sites.csv", sep=",", header=TRUE)
ct_sites<-data.frame(long=ct_sites$long, lat=ct_sites$lat, year=2010)
#combine gbif observations and those from the genetic dataset
gbif_all <- data.frame(rbind(gbif_all, ct_sites))
gbif_all <- gbif_all[which(gbif_all$lat > -34.5),]
gbif_all <- gbif_all[which(gbif_all$long > 125),]
#remove unlikely occurrence locations (e.g., central Australia in the desert)
gbif_badlat<-gbif_all$lat < -22
gbif_badlong<-gbif_all$long < 140
gbif_badlat_badlong<-gbif_badlat+gbif_badlong
gbif_all<-gbif_all[-which(gbif_badlat_badlong == 2),]
#save filtered set of occurrence records
write.csv(gbif_all, "occurrence_filtered.csv", row.names=FALSE)
